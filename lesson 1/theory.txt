LESSON 2:

configuring npm
  -npm init

-Package.json is a configuration for npm 
Bundlers:
 -webpack(large resources that needs to be bundled)
 -parcel(easy configuration)
 -vite

Dependencies:
 -dev dependecy(during development)  (npm install -d parcel)
 -normal dependencya(also used in production)

 caret(^) and tilde(~)
   ^ - only upgrades to small updates
   ~ - even upgrades to large updates

Package.json and Package-lock.json
 -Package.json is a approx version of dependency
 -Package-lock.json is a exact version of dependency

Transative dependecy - Each dependency will have their own dependencies

Node modules - collections of all the dependencies


# Parcel 
  -Dev build 
  -Local Server 
  -HMR = Hot module Replacement
  -File watching Algo-written in c++
  -Caching - Faster Build 
  - Image Optimisation 
  -Minification 
  -Bundling 
  -Compress
  -Consistent Hashing 
  -Code Splitting 
  -Differential Bundling - supports older browsers 
  -Diagonostic for easy error handling 
  -HTTPs 
  -Tree shaking - remove less used code 
  -Different dev and prod bundles


Dev build :

 -Package.json - "scripts":{
    "start":"parcel filename.html",
    "build":"parcel build filename.html"
 }

 Babel :
  -responsible for transpiling jsx code to js engine

Component-(class Component and functional Component)

functional Component - a function that returns some jsx (react element)
                     - First Letter Is a Capital Letter
                     - rendering a component - root.render(<HeaderComponent />)

LESSON 4 : 
Food ordering app 
  -Header 
    -Logo
    -Navigation Links (Home,About,cart)
  -Body
    -search Bar 
    -restaurant cards 
      -img 
      -title 
      -star rating 
      -cuisine 
      -price
  -Footer
    -copyright
    -links


Props => They are arguments that you pass into functional component

#LESSON 4:
-preferred to keep the app.js file in src folder 
- create a new component folder and keep all the component files separately
- first need to export the file and then need to import 
- keep a utils folder to keep all the hard-coded data , CDN LINKs that must be shared across all the components in the app 

default export - if u want to export only one thing 
named export - when u want to have multiple export 

-default export/import:

export default Component
import Component from "Path";

-named export/import:

export const component;
import {component} from "Path";


REACT HOOKS 
  -normal JS utility functions 
  -useState() - super powerful state variables in react
  -useEffect()

useState - hook :
  -whenever a state variable updates , react rerenders the page

  const [var,setVar] = useState([default data]);

Reconciliation Algo
virtual DOM - actual representation of actual DOM 
diff Algo - will find out the difference between OLD VIRTUAL DOM and NEW VIRTUAL DOM.
          - will update the DOM and renders it. 
          - in REACT 16.
          - this algo is known as REACT fiber.

LESSON 6:(LET'S EXPLORE THE WORLD)

MONOLITHIC AND MICROSERVICE ARCHITECTURE:

MONOLITHIC:
   -Every small code is placed under the same big project
   -So you have to deploy the project everytime you do any small changes

MICROSERVICES:
   -All different small thing had different services
   -Separation of concern and single responsiblity principle
   -These different services communicate with each other 
   - Each services can have their own tech stack and language
   -On different ports, different services are deployed.
   -All the ports can be mapped to domain name
   

FETCHING DATA FROM BACKEND:
  - On load -> API call -> render the UI 
  - On load -> render UI -> API call -> rerender UI (better approach and UX)

HOOK - normal JS utility functions 
  -useEffect hook
    -To execute a callback function after rendering the component
    -takes 2 arguments,
      1.callback function
      2.dependecy array

SYNTAX:
useEffect(()=>{
    fetchData();
}, []);

const fetchData = async ()={
  const data = await fetch('url');

  const json = await data.json();
  setlistOfRestaurant();
}

OPTIONAL CHAINING:
  -when you are not sure if the property exist in a nested object
  -  instead of using => json.data ? json.data.cards : undefined
  -  use json.data?.cards

SHIMMER UI:
  -shimmer UI is a kind of user interface that mimics the shades or the forms of content that will ultimately appear on the screen

useState hook - when the local state variable changes , react will rerender the component
              - That's why you are able to see that const state variable changes because it's essentially
                a new variable when it rerenders.
              - whenever a local state variable updates , react triggers a Reconciliation cycle.

EPISODE 7: LETS FIND THE PATH:

useEffect Hook:
  -will be called evertime you render the component 
  - arguments - a callback function, and a dependecy array.
  -callback function is mandatory
  -if no dependecy array, useEffect is called on every component render

  -case 1: If the dependecy array is EMPTY:
            - useEffect is called in the initial render and only once
  -case 2: If dependecy array is NOT empty . eg.[btnName].
            - everytime btnName changes , useEffect is called
  

  NEVER USE USESTATE HOOK OUTSIDE THE COMPONENT- USED TO CREATE LOCAL STATE VARIABLE
                                                - always create at the top of the component.
                                                -never create use useState in side a conditional statement(if statement).

install react-router-dom
import {createBrowserRouter,RouterProvider} from "react-router-dom" //named import

const appRouter = createBrowserRouter([  // Array of objects as argumet in the function
  {
    path:"/",
    element:<Body />,
    errorElement: <Error />,
  },
  {

  }
])


