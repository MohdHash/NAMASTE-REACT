LESSON 2:

configuring npm
  -npm init

-Package.json is a configuration for npm 
Bundlers:
 -webpack(large resources that needs to be bundled)
 -parcel(easy configuration)
 -vite

Dependencies:
 -dev dependecy(during development)  (npm install -d parcel)
 -normal dependencya(also used in production)

 caret(^) and tilde(~)
   ^ - only upgrades to small updates
   ~ - even upgrades to large updates

Package.json and Package-lock.json
 -Package.json is a approx version of dependency
 -Package-lock.json is a exact version of dependency

Transative dependecy - Each dependency will have their own dependencies

Node modules - collections of all the dependencies


# Parcel 
  -Dev build 
  -Local Server 
  -HMR = Hot module Replacement
  -File watching Algo-written in c++
  -Caching - Faster Build 
  - Image Optimisation 
  -Minification 
  -Bundling 
  -Compress
  -Consistent Hashing 
  -Code Splitting 
  -Differential Bundling - supports older browsers 
  -Diagonostic for easy error handling 
  -HTTPs 
  -Tree shaking - remove less used code 
  -Different dev and prod bundles


Dev build :

 -Package.json - "scripts":{
    "start":"parcel filename.html",
    "build":"parcel build filename.html"
 }

 Babel :
  -responsible for transpiling jsx code to js engine

Component-(class Component and functional Component)

functional Component - a function that returns some jsx (react element)
                     - First Letter Is a Capital Letter
                     - rendering a component - root.render(<HeaderComponent />)

LESSON 4 : 
Food ordering app 
  -Header 
    -Logo
    -Navigation Links (Home,About,cart)
  -Body
    -search Bar 
    -restaurant cards 
      -img 
      -title 
      -star rating 
      -cuisine 
      -price
  -Footer
    -copyright
    -links


Props => They are arguments that you pass into functional component

LEESON 4:
-preferred to keep the app.js file in src folder 
- create a new component folder and keep all the component files separately
- first need to export the file and then need to import 
- keep a utils folder to keep all the hard-coded data , CDN LINKs that must be shared across all the components in the app 

default export - if u want to export only one thing 
named export - when u want to have multiple export 

-default export/import:

export default Component
import Component from "Path";

-named export/import:

export const component;
import {component} from "Path";
